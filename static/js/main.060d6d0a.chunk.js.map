{"version":3,"sources":["assets/defaultFavicon.ico","assets/redFavicon.ico","assets/blueFavicon.ico","assets/yellowFavicon.ico","assets/greenFavicon.ico","redux/reducer.js","Timer.js","Game.js","Home.js","Settings.js","App.js","index.js"],"names":["module","exports","INITIAL_STATE","page","stateID","gameID","players","timer","currentTime","time","started","darkMode","colorBlind","color","board","turn","teams","winner","applySetPage","state","action","applySetStateID","applySetGameID","applySetPlayers","applySetTimer","applySetCurrentTime","applySetTime","applySetStarted","applySetDarkMode","applySetColorBlind","applySetColor","applySetBoard","applySetTurn","applySetTeams","applySetWinner","rootReducer","combineReducers","connect4State","type","addRedux","component","connect","dispatch","setPage","setStateID","setGameID","setPlayers","setTimer","setCurrentTime","setTime","setStarted","setDarkMode","setColorBlind","setColor","setBoard","setTurn","setTeams","setWinner","Timer","props","updated","this","clearInterval","setState","setInterval","tick","prevProps","prevState","className","React","favi","document","getElementById","setAttribute","defaultFavicon","redFavicon","yellowFavicon","greenFavicon","blueFavicon","column","axios","post","then","_","toLocaleLowerCase","borders","tileBorders","href","window","location","host","map","team","key","toLowerCase","id","onClick","e","stopPropagation","target","value","name","htmlFor","row","idx1","tile","idx2","preventDefault","place","reset","handleClick","bind","includes","length","sock","WebSocket","onopen","send","JSON","stringify","onmessage","msg","json","parse","data","state_id","has_timer","cur_time","onclose","history","pushState","onSubmit","autoFocus","onChange","parseInt","defaultChecked","toggle","Settings","save","body","removeAttribute","localStorage","getItem","settings","setItem","load","pathname","slice","Home","Game","ReactDOM","render","store","createStore","basename","process","path","App"],"mappings":"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","file":"static/js/main.060d6d0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/defaultFavicon.913600e4.ico\";","module.exports = __webpack_public_path__ + \"static/media/redFavicon.3401ab9d.ico\";","module.exports = __webpack_public_path__ + \"static/media/blueFavicon.874514d6.ico\";","module.exports = __webpack_public_path__ + \"static/media/yellowFavicon.632fadd3.ico\";","module.exports = __webpack_public_path__ + \"static/media/greenFavicon.bb6577c1.ico\";","import { combineReducers } from 'redux';\nimport {connect} from \"react-redux\";\n\nconst INITIAL_STATE = {\n    // site data\n    page: \"HOME\",       // current page\n    stateID: \"\",        // current game state ID\n    gameID: \"\",         // ID of current game\n    players: 2,         // number of players\n    timer: false,       // false if no timer, true if timer\n    currentTime: -1,    // time left before turn ends\n    time: -1,           // time to refresh to after each turn\n    started: false,     // whether or not the game has started\n\n    // settings\n    darkMode: false,    // dark mode activated\n    colorBlind: false,  // color blind mode activated\n\n    // game data\n    color: \"Neutral\",   // the color of the player\n    board: [],        // the game board\n    turn: \"Neutral\",    // the current turn color\n    teams: [],          // team colors\n    winner: \"Neutral\",  // the game winner\n};\n\n// reducers\nconst applySetPage = (state, action) => ({ ...state, page: action.page });\nconst applySetStateID = (state, action) => ({ ...state, stateID: action.stateID });\nconst applySetGameID = (state, action) => ({ ...state, gameID: action.gameID });\nconst applySetPlayers = (state, action) => ({ ...state, players: action.players });\nconst applySetTimer = (state, action) => ({ ...state, timer: action.timer });\nconst applySetCurrentTime = (state, action) => ({ ...state, currentTime: action.currentTime });\nconst applySetTime = (state, action) => ({ ...state, time: action.time });\nconst applySetStarted = (state, action) => ({ ...state, started: action.started });\nconst applySetDarkMode = (state, action) => ({ ...state, darkMode: action.darkMode });\nconst applySetColorBlind = (state, action) => ({ ...state, colorBlind: action.colorBlind });\nconst applySetColor = (state, action) => ({ ...state, color: action.color });\nconst applySetBoard = (state, action) => ({ ...state, board: action.board });\nconst applySetTurn = (state, action) => ({ ...state, turn: action.turn });\nconst applySetTeams = (state, action) => ({ ...state, teams: action.teams })\nconst applySetWinner = (state, action) => ({ ...state, winner: action.winner });\n\n// reducer\nfunction reducer(state = INITIAL_STATE, action) {\n    switch (action.type) {\n        case 'PAGE_SET': { return applySetPage(state, action); }\n        case 'STATEID_SET': { return applySetStateID(state, action); }\n        case 'GAMEID_SET': { return applySetGameID(state, action); }\n        case 'PLAYERS_SET': { return applySetPlayers(state, action); }\n        case 'TIMER_SET': { return applySetTimer(state, action); }\n        case 'CURRENTTIME_SET': { return applySetCurrentTime(state, action); }\n        case 'TIME_SET': { return applySetTime(state, action); }\n        case 'STARTED_SET': { return applySetStarted(state, action); }\n\n        case 'DARKMODE_SET': { return applySetDarkMode(state, action); }\n        case 'COLORBLIND_SET': { return applySetColorBlind(state, action); }\n\n        case 'COLOR_SET': { return applySetColor(state, action); }\n        case 'BOARD_SET': { return applySetBoard(state, action); }\n        case 'TURN_SET': { return applySetTurn(state, action); }\n        case 'TEAMS_SET': { return applySetTeams(state, action); }\n        case 'WINNER_SET': { return applySetWinner(state, action); }\n        default: { return state; }\n    }\n}\n\nconst rootReducer = combineReducers({ connect4State: reducer })\nexport default rootReducer;\n\n/**\n * Add redux data to react component.\n * @param component - the react component to add redux data to.\n * @returns {*} an new component with added redux data.\n */\nexport function addRedux(component) {\n    function mapStateToProps(state) {\n        return {\n            page: state.connect4State.page,\n            stateID:  state.connect4State.stateID,\n            gameID: state.connect4State.gameID,\n            players: state.connect4State.players,\n            timer: state.connect4State.timer,\n            currentTime: state.connect4State.currentTime,\n            time: state.connect4State.time,\n            started: state.connect4State.started,\n\n            darkMode: state.connect4State.darkMode,\n            colorBlind: state.connect4State.colorBlind,\n\n            color: state.connect4State.color,\n            board: state.connect4State.board,\n            turn: state.connect4State.turn,\n            teams: state.connect4State.teams,\n            winner: state.connect4State.winner,\n        };\n    }\n    const mapDispatchToProps = (dispatch) => ({\n        setPage: (page) => { dispatch({type: 'PAGE_SET', page}); },\n        setStateID: (stateID) => { dispatch({type: 'StateID_SET', stateID}); },\n        setGameID: (gameID) => { dispatch({type: 'GAMEID_SET', gameID}); },\n        setPlayers: (players) => { dispatch({type: 'PLAYERS_SET', players}); },\n        setTimer: (timer) => { dispatch({type: 'TIMER_SET', timer}); },\n        setCurrentTime: (currentTime) => { dispatch({type: 'CURRENTTIME_SET', currentTime}); },\n        setTime: (time) => { dispatch({type: 'TIME_SET', time}); },\n        setStarted: (started) => { dispatch({type: 'STARTED_SET', started}); },\n\n        setDarkMode: (darkMode) => { dispatch({type: 'DARKMODE_SET', darkMode}); },\n        setColorBlind: (colorBlind) => { dispatch({type: 'COLORBLIND_SET', colorBlind}); },\n\n        setColor: (color) => { dispatch({type: 'COLOR_SET', color}); },\n        setBoard: (board) => { dispatch({type: 'BOARD_SET', board}); },\n        setTurn: (turn) => { dispatch({type: 'TURN_SET', turn}); },\n        setTeams: (teams) => { dispatch({type: 'TEAMS_SET', teams}); },\n        setWinner: (winner) => { dispatch({type: 'WINNER_SET', winner}); }\n    });\n    return connect(mapStateToProps, mapDispatchToProps)(component);\n}","// Connect4 Timer Component\n\nimport * as React from \"react\";\n\nexport class Timer extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = { currentTime: props.currentTime }\n        this.timer = null;\n        this.updated = false;\n    }\n\n    tick() {\n        if (this.props.winner !== \"Neutral\") {\n            clearInterval(this.timer)\n            this.setState({\n                currentTime: this.props.time\n            });\n        } else if (this.updated === true) {\n            this.setState({\n                currentTime: this.props.currentTime\n            });\n            this.updated = false;\n        } else if (this.state.currentTime > 0) {\n            this.setState({\n                currentTime: this.state.currentTime - 1\n            });\n        }\n    }\n\n    componentDidMount() { this.timer = setInterval(() => this.tick(), 1000); }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.turn !== this.props.turn) {\n            clearInterval(this.timer);\n            this.updated = true;\n            this.timer = setInterval(() => this.tick(), 1000)\n        }\n    }\n\n    componentWillUnmount() { clearInterval(this.timer); }\n\n    render() {\n        return (<div className=\"standard-txt boldest-txt dark\">time: {this.state.currentTime}</div>)\n    }\n}","// Connect4 Game Page\n\nimport * as React from \"react\";\nimport {addRedux} from \"./redux/reducer\";\nimport axios from 'axios';\nimport {Timer} from \"./Timer\";\nimport defaultFavicon from \"./assets/defaultFavicon.ico\"\nimport redFavicon from \"./assets/redFavicon.ico\"\nimport blueFavicon from \"./assets/blueFavicon.ico\"\nimport yellowFavicon from \"./assets/yellowFavicon.ico\"\nimport greenFavicon from \"./assets/greenFavicon.ico\"\n\n\nclass GamePage extends React.Component {\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.winner !== \"Neutral\") {\n            document.getElementById(\"favicon\").setAttribute(\"href\", defaultFavicon);\n        } else {\n            let favi;\n            if (this.props.turn === \"Red\") favi = redFavicon;\n            else if (this.props.turn === \"Yellow\") favi = yellowFavicon;\n            else if (this.props.turn === \"Green\") favi = greenFavicon;\n            else if (this.props.turn === \"Blue\") favi = blueFavicon;\n            else favi = defaultFavicon;\n            document.getElementById(\"favicon\").setAttribute(\"href\", favi);\n        }\n    }\n\n    /**\n     * POST place - send a place token request\n     * @param column - the column to place the token\n     */\n    place(column) { axios.post('http://localhost:8080/place', {\"game_id\": this.props.gameID, \"color\": this.props.color, \"column\": column}).then(_ => {}) }\n\n    /**\n     * POST reset - send a reset request\n     */\n    reset() { axios.post('http://localhost:8080/reset', {\"game_id\": this.props.gameID}).then(_ => {}) }\n\n    render() {\n        let turn = (this.props.winner !== \"Neutral\") ? this.props.winner.toLocaleLowerCase() : this.props.turn.toLocaleLowerCase()\n        let borders = (this.props.colorBlind) ? \"-blind-border\" : \"-border\";\n        let tileBorders = (this.props.colorBlind) ? \"-tile-blind-border\" : \"\";\n        return (\n            <div className=\"flexbox flex-column flex-center full-height\">\n                <div className=\"flexbox flex-column flex-center game-width\">\n                    <h1 className=\"title-txt large-padding-top\"><a className=\"red remove-hyperlink\" href={'http://' + window.location.host}>CONNECT<span className=\"blue\">4</span></a></h1>\n                    <p className=\"flex-self-start small-txt lighter-txt dark medium-padding-top\">share this link with friends: <a className=\"dark\" href={\"https://\" +  window.location.host + \"/\" + this.props.gameID}>{\"https://\" +  window.location.host + \"/\" + this.props.gameID}</a></p>\n                    <hr className=\"full-width dark\"/>\n                    <div className=\"full-width\">\n                        <div className=\"flexbox space-between full-width small-padding-top\">\n                            <div className=\"flexbox\">\n                                { this.props.teams.map((team) =>\n                                    <div key={team + \"-div\"} className={\"color-input \" + team.toLowerCase() + \"-input-background \" + team.toLowerCase() + borders }>\n                                        <input key={team + \"-input\"} id={team} onClick={e => {\n                                        e.stopPropagation();\n                                        this.props.setColor(e.target.value)\n                                        }} name=\"color\" type=\"radio\" value={team}/>\n                                        <label key={team + \"-label\"} htmlFor={team}\n                                               className={team.toLowerCase() + \" boldest-txt small-txt\"}>\n                                            {team.toLowerCase()}</label>\n                                    </div>\n                                ) }\n                            </div>\n                            <div className=\"flexbox\">\n                                <p className={turn + \" standard-txt boldest-txt flex-self-end\"}>{\n                                    this.props.winner !== \"Neutral\" ?\n                                        this.props.winner.toLowerCase() + \" wins!\" :\n                                        this.props.turn.toLowerCase() + \" turn\"\n                                }</p>\n                            </div>\n                        </div>\n                        <div className=\"flexbox flex-column flex-center small-margin-top blue-background small-padding\">\n                            <div className=\"full-width\">{\n                                this.props.board.map((row, idx1) => {\n                                    return (\n                                        <div key={\"rpw-\" + idx1} className=\"full-width flexbox space-between\">\n                                            {row.map((tile, idx2) => {\n                                                return <button className=\"tile\" key={idx1 + \",\" + idx2} onClick={ e => {\n                                                    e.preventDefault();\n                                                    this.place(idx2);\n                                                }}>\n                                                    <div className={tile.toLowerCase() + \"-background \" + tile.toLowerCase() + tileBorders}/>\n                                                </button>\n                                            })}\n                                        </div>\n                                    )\n                                })\n                            }</div>\n                        </div>\n                        <div className=\"flexbox space-between full-width small-padding-top\">\n                            {\n                                this.props.started && this.props.timer ?\n                                    <Timer time={this.props.time} currentTime={this.props.currentTime} turn={this.props.turn} winner={this.props.winner}/> :\n                                    this.props.timer ?\n                                        <div className=\"standard-txt boldest-txt dark\">time: {this.props.time}</div> :\n                                        <div/>\n                            }\n                            <div className=\"flexbox flex-center\">\n                                <div className=\"flexbox flex-center small-padding-right\">\n                                    <button className=\"fas fa-cog dark gear\" onClick={(e) => {\n                                        e.preventDefault();\n                                        this.props.setPage(\"SETTINGS\");\n                                    }}/>\n                                </div>\n                                <div className=\"flexbox flex-center\">\n                                    <button onClick={(e) => {\n                                        e.preventDefault();\n                                        this.reset();\n                                    }} className=\"resetBtn smallest-txt bolder-txt\">new game</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"absolute bottom dev\">\n                    <p className=\"small-txt lighter-txt gray\">Created by <a className=\"gray\" href=\"https://www.cfregly.com\">Chris Fregly</a></p>\n                </div>\n            </div>\n        )\n    }\n}\nexport default addRedux(GamePage);","// Connect4 Home Page\n\nimport * as React from \"react\";\nimport {addRedux} from \"./redux/reducer\";\nimport axios from 'axios';\n\nclass HomePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    // Joins a game and opens a websocket for future updates\n    handleClick(e) {\n        e.preventDefault();\n        if (this.props.gameID.includes(\" \") || this.props.gameID.length < 3) return\n        axios.post('http://localhost:8080/join',\n            {\"game_id\": this.props.gameID, \"players\": this.props.players, \"timer\": this.props.timer}).then(_ => {\n                let sock = new WebSocket(\"ws://localhost:8080/subscribe\");\n                sock.onopen = () => { sock.send(JSON.stringify({ \"game_id\": this.props.gameID })); }\n                sock.onmessage = (msg) => {\n                    let json = JSON.parse(msg.data)\n                    if (this.props.stateID !== json.state_id) {\n                        this.props.setStateID(json.state_id);\n                        this.props.setBoard(json.board);\n                        this.props.setTurn(json.turn);\n                        this.props.setTeams(json.teams);\n                        this.props.setWinner(json.winner);\n                        this.props.setTimer(json.has_timer);\n                        this.props.setCurrentTime(json.cur_time);\n                        this.props.setTime(json.time);\n                        this.props.setStarted(json.started);\n                    }\n                }\n                sock.onclose = () => {}\n            });\n        this.props.setPage(\"GAME\");\n        window.history.pushState(null, '', '/' + this.props.gameID);\n    }\n\n    render() {\n        return (\n            <div className=\"flexbox flex-column flex-center full-height\">\n                <div className=\"flexbox flex-column flex-center half-width\">\n                    <h1 className=\"title-txt large-padding-top\"><a className=\"red remove-hyperlink\" href={'http://' + window.location.host}>CONNECT<span className=\"blue\">4</span></a></h1>\n                    <p className=\"standard-txt lighter-txt gray large-padding-top\">\n                        Play 2-3 player connect4 against friends on one or more devices.\n                        To create a game or join an existing one, enter a game ID and click 'Go'.\n                    </p>\n                    <form className=\"flexbox large-padding-top full-width\" onSubmit={this.handleClick}>\n                        <input className=\"input\" autoFocus type=\"text\" value={this.props.gameID}\n                               onChange={(e) => this.props.setGameID(e.target.value)}/>\n                        <button className=\"goBtn\" onClick={this.handleClick}>Go</button>\n                    </form>\n                    <div className=\"flexbox flex-self-end small-padding-top\">\n                        <div className=\"flexbox flex-center small-padding-right\">\n                            <button className=\"fas fa-cog dark gear\" onClick={(e) => {\n                                e.preventDefault();\n                                this.props.setPage(\"SETTINGS\");\n                            }}/>\n                        </div>\n                        <div className=\"flexbox flex-center medium-padding-right\">\n                            <label className=\"small-padding-right standard-txt boldest-txt blue\" htmlFor=\"players\">PLAYERS</label>\n                            <select className=\"small-txt boldest-txt select\" name=\"players\" id=\"players\"\n                                    onChange={(e) => this.props.setPlayers(parseInt(e.target.value))}>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                {/*<option value=\"4\">4</option>*/}\n                            </select>\n                        </div>\n                        <div className=\"flexbox flex-center\">\n                            <label className=\"small-padding-right standard-txt boldest-txt blue\">TIMER</label>\n                            <label className=\"switch\">\n                                <input type=\"checkbox\" onChange={(e) => {\n                                    e.stopPropagation();\n                                    this.props.setTimer(!this.props.timer);}\n                                }/>\n                                <span className=\"slider round\"/>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"absolute bottom\">\n                    <p className=\"small-txt lighter-txt gray\">Created by <a className=\"gray\" href=\"https://www.cfregly.com\">Chris Fregly</a></p>\n                </div>\n            </div>\n        )\n    }\n}\nexport default addRedux(HomePage);","// Connect4 Settings Page\n\nimport * as React from \"react\";\nimport {addRedux} from \"./redux/reducer\";\n\nclass SettingsPage extends React.Component {\n    render() {\n        return (\n            <div className=\"flexbox flex-column flex-center full-height\">\n                <button className=\"absolute exit\" onClick={(e) => {\n                    e.preventDefault();\n                    this.props.setPage(this.props.gameID ? \"GAME\" : \"HOME\")\n                }}/>\n                <div className=\"flexbox flex-column flex-center half-width\">\n                    <div className=\"flexbox flex-column flex-center\">\n                        <h1 className=\"title-txt large-padding-top\"><a className=\"red remove-hyperlink\" href={'http://' + window.location.host}>CONNECT<span className=\"blue\">4</span></a></h1>\n                        <h1 className=\"standard-txt bolder-txt flex-self-end dark\">SETTINGS</h1>\n                    </div>\n                    <div className=\"full-width large-padding-top\">\n                        <div className=\"flexbox space-between full-width\">\n                            <div>\n                                <h2 className=\"standard-txt boldest-txt dark\">DARK MODE</h2>\n                                <p className=\"small-txt gray\">darken the mood and may also conserve battery life</p>\n                            </div>\n                            <label className=\"switch\">\n                                <input type=\"checkbox\" defaultChecked={this.props.darkMode} onChange={(e) => {\n                                    e.stopPropagation();\n                                    let toggle = !this.props.darkMode;\n                                    this.props.setDarkMode(toggle);\n                                    Settings.save({\"darkMode\": toggle, \"colorBlind\": this.props.colorBlind});\n                                    if (toggle) document.body.setAttribute('data-theme', 'dark');\n                                    else document.body.removeAttribute('data-theme')\n                                }}/>\n                                <span className=\"slider round\"/>\n                            </label>\n                        </div>\n                        <div className=\"flexbox space-between full-width medium-padding-top\">\n                            <div>\n                                <h2 className=\"standard-txt boldest-txt dark\">COLOR BLIND MODE</h2>\n                                <p className=\"small-txt gray\">add patterns to colors to distinguish teams</p>\n                            </div>\n                            <label className=\"switch\">\n                                <input type=\"checkbox\" defaultChecked={this.props.colorBlind} onChange={(e) => {\n                                    e.stopPropagation();\n                                    let toggle = !this.props.colorBlind;\n                                    this.props.setColorBlind(toggle);\n                                    Settings.save({\"darkMode\": this.props.darkMode, \"colorBlind\": toggle});\n                                }}/>\n                                <span className=\"slider round\"/>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"absolute bottom\">\n                    <p className=\"small-txt lighter-txt gray\">Created by <a className=\"gray\" href=\"https://www.cfregly.com\">Chris Fregly</a></p>\n                </div>\n            </div>\n        )\n    }\n}\nexport default addRedux(SettingsPage);\n\n// Saves settings to local storage\nexport class Settings {\n    // Load settings from location storage if there\n    static load() { return JSON.parse(window.localStorage.getItem('settings')) || {}; }\n    // Save settings to local storage\n    static save(settings) { window.localStorage.setItem('settings', JSON.stringify(settings)); }\n}","// Connect4 App Page\n\nimport * as React from \"react\";\nimport GamePage from \"./Game\";\nimport HomePage from \"./Home\";\nimport SettingsPage, {Settings} from \"./Settings\";\nimport {addRedux} from \"./redux/reducer\";\nimport axios from \"axios\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        // Load settings\n        let settings = Settings.load();\n        if (settings.darkMode) {\n            this.props.setDarkMode(settings.darkMode);\n            document.body.setAttribute('data-theme', 'dark');\n        } else document.body.removeAttribute('data-theme')\n\n        if (settings.colorBlind) { this.props.setColorBlind(settings.colorBlind); }\n    }\n\n    componentDidMount() {\n        // Set game if in one\n        if (document.location.pathname !== \"/\") {\n            this.props.setGameID(document.location.pathname.slice(1));\n            let data = {\"game_id\": this.props.gameID, \"players\": 2, \"timer\": false};\n            axios.post('http://localhost:8080/join', data).then(_ => {\n                let sock = new WebSocket(\"ws://localhost:8080/subscribe\");\n                sock.onopen = () => { sock.send(JSON.stringify({ \"game_id\": this.props.gameID })); }\n                sock.onmessage = (msg) => {\n                    let json = JSON.parse(msg.data)\n                    if (this.props.stateID !== json.state_id) {\n                        this.props.setStateID(json.state_id);\n                        this.props.setBoard(json.board);\n                        this.props.setTurn(json.turn);\n                        this.props.setTeams(json.teams);\n                        this.props.setWinner(json.winner);\n                        this.props.setTimer(json.has_timer);\n                        this.props.setCurrentTime(json.cur_time);\n                        this.props.setTime(json.time);\n                        this.props.setStarted(json.started);\n                    }\n                }\n                sock.onclose = () => {}\n            })\n            this.props.setPage(\"GAME\");\n        }\n    }\n\n    render() {\n        let page = <HomePage/>;\n        if (this.props.page === \"HOME\") page = <HomePage/>;\n        else if (this.props.page === \"GAME\") page = <GamePage/>;\n        else if (this.props.page === \"SETTINGS\") page = <SettingsPage/>;\n        return ( <div>{ page }</div> );\n    }\n}\nexport default addRedux(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport rootReducer from \"./redux/reducer\";\nimport { HashRouter, Route } from \"react-router-dom\";\n// import { createBrowserHistory } from \"history\";\n\n// const customHistory = createBrowserHistory();\n\nReactDOM.render(\n    <Provider store={createStore(rootReducer)}>\n        <HashRouter basename={process.env.PUBLIC_URL}>\n            <Route path=\"*\" component={App} />\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}